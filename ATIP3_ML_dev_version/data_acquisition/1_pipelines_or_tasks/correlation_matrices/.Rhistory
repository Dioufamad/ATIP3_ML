}
list_fts_all_in_fs_table_as_correct_names_uniks = unique(list_fts_all_in_fs_table_as_correct_names)
#...make a new table with only one gene copy and its marks are each a sum of the copies marks
my_one_gene_copy_matrix = as.data.frame(matrix(NA, nrow = length(list_fts_all_in_fs_table_as_correct_names_uniks), ncol = dim(fs_table_raw_nnc_only_marks_only)[2]))
colnames(my_one_gene_copy_matrix) <- colnames(fs_table_raw_nnc_only_marks_only)
my_one_gene_copy_matrix[,"Features"] = list_fts_all_in_fs_table_as_correct_names_uniks
for (index_a_correct_gene_name in c(1:length(list_fts_all_in_fs_table_as_correct_names_uniks))){
a_correct_gene_name = list_fts_all_in_fs_table_as_correct_names_uniks[index_a_correct_gene_name]
# lets get a list of the fts written in a MT fashion that were composed from a_correct_gene_name
list_fts_MT_names_corresponding_to_a_correct_gene_name <- c()
for (index_a_MT_ft_name2 in c(1:length(list_fts_unik_in_fs_table_raw_nnc_only_marks_only))){
a_MT_ft_name2 = list_fts_unik_in_fs_table_raw_nnc_only_marks_only[index_a_MT_ft_name2]
pieces_of_ftname_as_MT_name2 <- strsplit(a_MT_ft_name2, "_in_")[[1]] # NB : if the sep is not found, a vector of only the entire word is kept so getting the 1st elt gives it also
ftname_as_correct_initial_name2 <-pieces_of_ftname_as_MT_name2[1]
if (ftname_as_correct_initial_name2==a_correct_gene_name){
list_fts_MT_names_corresponding_to_a_correct_gene_name = c(list_fts_MT_names_corresponding_to_a_correct_gene_name,a_MT_ft_name2)
}
}
# lets restrict the table with marks to only the rows that contain the correct gene name
# fs_table_raw_nnc_only_marks_only_1_gene_rows <- fs_table_raw_nnc_only_marks_only[which(grepl(a_correct_gene_name, fs_table_raw_nnc_only_marks_only$Features, fixed=TRUE)), ] # deprecated
fs_table_raw_nnc_only_marks_only_1_gene_rows <- fs_table_raw_nnc_only_marks_only[which(fs_table_raw_nnc_only_marks_only$Features %in% list_fts_MT_names_corresponding_to_a_correct_gene_name), ]
# lets compute an added row that will contain the total of each column of marks
fs_table_raw_nnc_only_marks_only_1_gene_rows_no_ft_col = fs_table_raw_nnc_only_marks_only_1_gene_rows[,2:(num_marks_cols+1)]
fs_table_raw_nnc_only_marks_only_1_gene_rows_no_ft_col["Total" ,] <- colSums(fs_table_raw_nnc_only_marks_only_1_gene_rows_no_ft_col)
# lets add the result row as a row in our matrix containing only the correct names of genes
my_one_gene_copy_matrix[my_one_gene_copy_matrix$Features == a_correct_gene_name,2:(num_marks_cols+1)] <- fs_table_raw_nnc_only_marks_only_1_gene_rows_no_ft_col["Total",]
}
# keep the new table of one copy per gene wether it is ST or MT
fs_table_raw_nnc_only_marks_only_and_pruned = my_one_gene_copy_matrix
}
# - lets add to a collector, this output table with marks only and with only one copy of each gene
# NB : to facilitate a future aggregation into one of these tables, the col 1 (Features is used as rownames)
rownames(fs_table_raw_nnc_only_marks_only_and_pruned) <- fs_table_raw_nnc_only_marks_only_and_pruned[,1]
fs_table_raw_nnc_only_marks_only_and_pruned[,1] <- NULL
list_fs_tables_retrieved_RAW_marks_only_and_pruned[[index_of_an_alg]] <- fs_table_raw_nnc_only_marks_only_and_pruned
# -----------------chunk 1
# - lets give an update on what have just been completed
paste("- FS ",index_of_an_alg," analysis finished and it is for ",tag_alg_corresp_2_fs_retrieved,"_on_",tag_nickname_cohort_corresp_2_fs_retrieved, sep='')
num_initial_sets_analysed <- num_initial_sets_analysed + 1
paste("Number of FSs analysed : ",num_initial_sets_analysed, sep='')
# end of the work on a table of raw coefs for one model
}
# end of work on all FSs ##!
# - lets unify the tables that contains only one copy of a gene and the marks cols only
# add rownames as a column in each data.frame and bind rows
# ------ TO CHANGE IF DATA CHANGES :  for now, we dont have a way to make loop for the pipes so we just resort to modifying the precedent chunk of code that unifies thefinal tables to get the big ones
# always copy and paste below, then modify before launching a different version
#>>>>>>>>>>>>>>version for 4 FSs analysis (uncomment to use)
fs_table_raw_nnc_only_marks_only_and_pruned_ALL_FSs <- bind_rows(list_fs_tables_retrieved_RAW_marks_only_and_pruned[[1]] %>% add_rownames(),
list_fs_tables_retrieved_RAW_marks_only_and_pruned[[2]] %>% add_rownames(),
list_fs_tables_retrieved_RAW_marks_only_and_pruned[[3]] %>% add_rownames(),
list_fs_tables_retrieved_RAW_marks_only_and_pruned[[4]] %>% add_rownames()) %>%
# evaluate following calls for each value in the rowname column
group_by(rowname) %>%
# add all non-grouping variables
summarise_all(sum)
#<<<<<<<<<<<<<<<<<<<<<<
# #>>>>>>>>>>>>>>version for 7 FSs analysis (uncomment to use)
# fs_table_raw_nnc_only_marks_only_and_pruned_ALL_FSs <- bind_rows(list_fs_tables_retrieved_RAW_marks_only_and_pruned[[1]] %>% add_rownames(),
#                                                                  list_fs_tables_retrieved_RAW_marks_only_and_pruned[[2]] %>% add_rownames(),
#                                                                  list_fs_tables_retrieved_RAW_marks_only_and_pruned[[3]] %>% add_rownames(),
#                                                                  list_fs_tables_retrieved_RAW_marks_only_and_pruned[[4]] %>% add_rownames(),
#                                                                  list_fs_tables_retrieved_RAW_marks_only_and_pruned[[5]] %>% add_rownames(),
#                                                                  list_fs_tables_retrieved_RAW_marks_only_and_pruned[[6]] %>% add_rownames(),
#                                                                  list_fs_tables_retrieved_RAW_marks_only_and_pruned[[7]] %>% add_rownames()) %>%
#   # evaluate following calls for each value in the rowname column
#   group_by(rowname) %>%
#   # add all non-grouping variables
#   summarise_all(sum)
# #<<<<<<<<<<<<<<<<<<<<<<
# #>>>>>>>>>>>>>>version for 6 FSs analysis (uncomment to use)
# fs_table_raw_nnc_only_marks_only_and_pruned_ALL_FSs <- bind_rows(list_fs_tables_retrieved_RAW_marks_only_and_pruned[[1]] %>% add_rownames(),
#                                                                  list_fs_tables_retrieved_RAW_marks_only_and_pruned[[2]] %>% add_rownames(),
#                                                                  list_fs_tables_retrieved_RAW_marks_only_and_pruned[[3]] %>% add_rownames(),
#                                                                  list_fs_tables_retrieved_RAW_marks_only_and_pruned[[4]] %>% add_rownames(),
#                                                                  list_fs_tables_retrieved_RAW_marks_only_and_pruned[[5]] %>% add_rownames(),
#                                                                  list_fs_tables_retrieved_RAW_marks_only_and_pruned[[6]] %>% add_rownames()) %>%
#   # evaluate following calls for each value in the rowname column
#   group_by(rowname) %>%
#   # add all non-grouping variables
#   summarise_all(sum)
# #<<<<<<<<<<<<<<<<<<<<<<
# #>>>>>>>>>>>>>>version for 3 FSs analysis (uncomment to use)
# fs_table_raw_nnc_only_marks_only_and_pruned_ALL_FSs <- bind_rows(list_fs_tables_retrieved_RAW_marks_only_and_pruned[[1]] %>% add_rownames(),
#                                                                  list_fs_tables_retrieved_RAW_marks_only_and_pruned[[2]] %>% add_rownames(),
#                                                                  list_fs_tables_retrieved_RAW_marks_only_and_pruned[[3]] %>% add_rownames()) %>%
#   # evaluate following calls for each value in the rowname column
#   group_by(rowname) %>%
#   # add all non-grouping variables
#   summarise_all(sum)
# #<<<<<<<<<<<<<<<<<<<<<<
# #>>>>>>>>>>>>>>version for 2 FSs analysis (uncomment to use)
# fs_table_raw_nnc_only_marks_only_and_pruned_ALL_FSs <- bind_rows(list_fs_tables_retrieved_RAW_marks_only_and_pruned[[1]] %>% add_rownames(),
#                                                                  list_fs_tables_retrieved_RAW_marks_only_and_pruned[[2]] %>% add_rownames()) %>%
#   # evaluate following calls for each value in the rowname column
#   group_by(rowname) %>%
#   # add all non-grouping variables
#   summarise_all(sum)
# #<<<<<<<<<<<<<<<<<<<<<<
# - styling the final table
# -- rename the Features column that got used as rownames and brought bacl as a column
colnames(fs_table_raw_nnc_only_marks_only_and_pruned_ALL_FSs)[1] <- "Features"   ##!
# # -- Optional : with this line, we can remove the Feat4Intercept (_SyntheticFeat4Intercept) and call it table V1
# fs_table_raw_nnc_only_marks_only_and_pruned_ALL_FSs <- fs_table_raw_nnc_only_marks_only_and_pruned_ALL_FSs[which(fs_table_raw_nnc_only_marks_only_and_pruned_ALL_FSs$Features !="_SyntheticFeat4Intercept"),]
# make a stash in case of missteps in tests
final_table_0_stash = fs_table_raw_nnc_only_marks_only_and_pruned_ALL_FSs
# the final table is V1 :
final_table_V1 = fs_table_raw_nnc_only_marks_only_and_pruned_ALL_FSs
# - lets make a version of the final unified table that will have this in addition :
#... the high stringency and lenient stringency status ("y" or "n")
# - lets get the list of fts to loop on
list_fts_in_table_V1 = unique(as.character(final_table_V1$Features))
# - lets get the list of cols for the s_st_fs_i and the list of cols for the s_mt_cp_i
list_cols_for_all_s_st_fs_i = c()
list_cols_for_all_s_mt_cp_i = c()
list_of_cols_final_table_V1 = c(colnames(final_table_V1))
for (a_col_in_list_of_cols_final_table_V1 in list_of_cols_final_table_V1){
if(startsWith(a_col_in_list_of_cols_final_table_V1, "s_st_fs_")){
list_cols_for_all_s_st_fs_i = c(list_cols_for_all_s_st_fs_i,a_col_in_list_of_cols_final_table_V1)
}else if(startsWith(a_col_in_list_of_cols_final_table_V1, "s_mt_cp_")){
list_cols_for_all_s_mt_cp_i = c(list_cols_for_all_s_mt_cp_i,a_col_in_list_of_cols_final_table_V1)
}
}
# - lets initialize the cols to inform
final_table_V1$high_string_status <- "_NOT_CHANGED_YET"
# final_table_V1$lenient_string_status <- "_NOT_CHANGED_YET"
final_table_V1$s_all <- 0
final_table_V1$s_all_abs <- 0
final_table_V1$SIG_status <- 0
# final_table_V1$Class_of_SIG <- 0 # not needed
# lets loop through the fts and get the stringency statuses
for (a_ft_in_table_V1 in list_fts_in_table_V1){ # for test use a_ft_in_table_V1 = list_fts_in_table_V1[3]
# + lets get the elts to compute s_all (score_s_for across all st & all mt)
val_m_0_st_seen = final_table_V1$m_0_st_seen[which(final_table_V1$Features == a_ft_in_table_V1)]
val_m_pos_st_seen = final_table_V1$m_pos_st_seen[which(final_table_V1$Features == a_ft_in_table_V1)]
val_m_neg_st_seen = final_table_V1$m_neg_st_seen[which(final_table_V1$Features == a_ft_in_table_V1)]
val_m_0_mt_seen = final_table_V1$m_0_mt_seen[which(final_table_V1$Features == a_ft_in_table_V1)]
val_m_pos_mt_seen = final_table_V1$m_pos_mt_seen[which(final_table_V1$Features == a_ft_in_table_V1)]
val_m_neg_mt_seen = final_table_V1$m_neg_mt_seen[which(final_table_V1$Features == a_ft_in_table_V1)]
val_st_fs_where_seen = final_table_V1$st_fs_where_seen[which(final_table_V1$Features == a_ft_in_table_V1)] # this line and the next one are not needed for s-all but to find the strigency statuses
val_mt_cp_found = final_table_V1$mt_cp_found[which(final_table_V1$Features == a_ft_in_table_V1)]
m_0_all = val_m_0_st_seen + val_m_0_mt_seen
m_pos_all = val_m_pos_st_seen + val_m_pos_mt_seen
m_neg_all = val_m_neg_st_seen + val_m_neg_mt_seen
# + lets compute s_all and s_all_abs # (##! to be added to the column for it)
s_all = score_s(m_0_all,m_pos_all,m_neg_all)
s_all_abs = abs(s_all)
# + lets get the row of values for the s_st_fs_i and the row of values for the s_mt_cp_i
# # 3 easy ways to subset a table
# row_values_for_all_s_st_fs_i_only <- subset(final_table_V1, Features == a_ft_in_table_V1, select = list_cols_for_all_s_st_fs_i)
# row_values_for_all_s_st_fs_i_only<-final_table_V1[which(final_table_V1$Features %in% a_ft_in_table_V1),names(final_table_V1) %in% list_cols_for_all_s_st_fs_i]
# row_values_for_all_s_st_fs_i_only<-final_table_V1[which(final_table_V1$Features %in% a_ft_in_table_V1),list_cols_for_all_s_st_fs_i]
row_values_for_all_s_st_fs_i_only<-final_table_V1[which(final_table_V1$Features %in% a_ft_in_table_V1),list_cols_for_all_s_st_fs_i]
row_values_for_all_s_mt_cp_i_only<-final_table_V1[which(final_table_V1$Features %in% a_ft_in_table_V1),list_cols_for_all_s_mt_cp_i]
# + lets make each of these 2 rows as a space of values
space_values_for_all_s_st_fs_i_only <-as.numeric(as.vector(row_values_for_all_s_st_fs_i_only))
space_values_for_all_s_mt_cp_i_only <-as.numeric(as.vector(row_values_for_all_s_mt_cp_i_only))
# + lets distribute the values in these 2 spaces by quality
list_s_st_values_high_string = c()
list_s_mt_values_high_string = c()
list_s_st_values_lenient_string_crit2 = c()
list_s_mt_values_lenient_string_crit2 = c()
for (a_val_in_space_values_for_all_s_st_fs_i_only in space_values_for_all_s_st_fs_i_only){ # for the st space of values
if (abs(a_val_in_space_values_for_all_s_st_fs_i_only)==1){
list_s_st_values_high_string = c(list_s_st_values_high_string,a_val_in_space_values_for_all_s_st_fs_i_only)
}else if (abs(a_val_in_space_values_for_all_s_st_fs_i_only)>=0.9){
list_s_st_values_lenient_string_crit2 = c(list_s_st_values_lenient_string_crit2,a_val_in_space_values_for_all_s_st_fs_i_only)
}
}
for (a_val_in_space_values_for_all_s_mt_cp_i_only in space_values_for_all_s_mt_cp_i_only){ # for the mt space of values
if (abs(a_val_in_space_values_for_all_s_mt_cp_i_only)==1){
list_s_mt_values_high_string = c(list_s_mt_values_high_string,a_val_in_space_values_for_all_s_mt_cp_i_only)
}else if (abs(a_val_in_space_values_for_all_s_mt_cp_i_only)>=0.9){
list_s_mt_values_lenient_string_crit2 = c(list_s_mt_values_lenient_string_crit2,a_val_in_space_values_for_all_s_mt_cp_i_only)
}
}
# + lets set the stringency statuses
high_string_status = "_NOT_CHANGED_YET" # (##! to be added to the column for it)
if ((length(list_s_st_values_high_string)==val_st_fs_where_seen)&(length(list_s_mt_values_high_string)==val_mt_cp_found)){
high_string_status = "Y"
}else{
high_string_status = "N"
}
lenient_string_crit1 = "_NOT_CHANGED_YET"
if ((length(list_s_st_values_high_string)>=(val_st_fs_where_seen-1))&(length(list_s_mt_values_high_string)>=(val_mt_cp_found-1))){
lenient_string_crit1 = "Y"
}else{
lenient_string_crit1 = "N"
}
lenient_string_crit2 = "_NOT_CHANGED_YET"
if ((length(list_s_st_values_lenient_string_crit2)==val_st_fs_where_seen)&(length(list_s_mt_values_lenient_string_crit2)==val_mt_cp_found)){
lenient_string_crit2 = "Y"
}else{
lenient_string_crit2 = "N"
}
lenient_string_status = "_NOT_CHANGED_YET" # (##! to be added to the column for it)
if ((lenient_string_crit1 == "Y") | (lenient_string_crit2 == "Y")){
lenient_string_status = "Y"
}else{
lenient_string_status = "N"
}
# + lets set the SIG_status
SIG_status = 0 # (##! to be added to the column for it)
if ((high_string_status == "Y") & (s_all_abs == 1)){
SIG_status = 1
}else{
SIG_status = 0
}
# + lets inform the cols (high_string_status,lenient_string_status,s_all, s_all_abs_,SIG_status in that order)
final_table_V1[which(final_table_V1$Features %in% a_ft_in_table_V1),"high_string_status"] = high_string_status
# final_table_V1[which(final_table_V1$Features %in% a_ft_in_table_V1),"lenient_string_status"] = lenient_string_status # not needed
final_table_V1[which(final_table_V1$Features %in% a_ft_in_table_V1),"s_all"] = s_all
final_table_V1[which(final_table_V1$Features %in% a_ft_in_table_V1),"s_all_abs"] = s_all_abs
final_table_V1[which(final_table_V1$Features %in% a_ft_in_table_V1),"SIG_status"] = SIG_status
# NB : (Class_of_SIG will be informed later because it needs another table for existence of gene) # not needed
}
# lets stash the obtained table in 2 fashions
final_table_V1_complete_stashed = final_table_V1 # full table stashed
# final_table_V1_restricted_to_cols_to_report = final_table_V1[c("Features","high_string_status","lenient_string_status","s_all","s_all_abs","SIG_status","Class_of_SIG")]
# final_table_V1_restricted_to_cols_to_report = final_table_V1[c("Features","high_string_status","s_all","s_all_abs","SIG_status","Class_of_SIG")] # not needed
final_table_V1_restricted_to_cols_to_report = final_table_V1[c("Features","high_string_status","s_all","s_all_abs","SIG_status")]
# >>>>>>>>>>> adding info of presence absence 1 (in FSs) # changed to implicate top 4 FSs only
# - lets add columns to identify the FS were each ft has existed
final_table_V2 = final_table_V1_restricted_to_cols_to_report
# + lets load the table of presence/absence cols of fts across 7 FS by L1
path2file_pres_abs_fts_7_FSs2_L1Regr = "/home/amad/PALADIN_1/3CEREBRO/garage/projects/ATIP3/ATIP3_ML/ATIP3_ML_dev_version/data_acquisition/1_pipelines_or_tasks/Multitask_learning/res_learning_tasks/outputs/runs/presence_absence_tables/presence_absence_table_for_FS_ST_L1_and_FS_MT_SGL1_4InitialSets_12152rows_5cols_GEX.csv"
table_pres_abs <- read.csv(file = path2file_pres_abs_fts_7_FSs2_L1Regr, header = TRUE)
names(table_pres_abs) # to see the cols
# remove the first col that is just an ordered index (1 to end)
table_pres_abs[,1] <- NULL
names(table_pres_abs) # to see the cols
# + join the presence/absence cols and the SIGs tables on all 7 models
df_left <-final_table_V2
colref_left <- "Features"
df_right <- table_pres_abs
colref_right <- "Features_bis"
final_table_V2 <- merge(x = df_left, y = df_right, by.x = colref_left, by.y = colref_right)
final_table_V2_stash = final_table_V2
# # >>>>>>>>>> adding info of presence absence 2 (in DSs) # not needed
# # - lets add columns to identify the DS were each ft has existed
# final_table_V3 = final_table_V2
# # + lets load the table of presence/absence cols of fts across 7 FS by L1
# path2file_pres_abs_fts_7_DSs = "/home/amad/PALADIN_1/3CEREBRO/garage/projects/ATIP3/ATIP3_ML/ATIP3_ML_dev_version/data_acquisition/1_pipelines_or_tasks/Multitask_learning/res_learning_tasks/outputs/runs/presence_absence_table_for_DS_ST_L1_and_DS_MT_SGL1_7InitialSets_19533rows_8cols_GEX.csv"
# table_pres_abs_7_DSs <- read.csv(file = path2file_pres_abs_fts_7_DSs, header = TRUE)
# # remove the first col that is just an ordered index (1 to end)
# table_pres_abs_7_DSs[,1] <- NULL
#
# names(table_pres_abs_7_DSs) # to see the cols
#
# # + join the presence/absence cols and the SIGs tables on all 7 models
# df_left <-final_table_V3
# colref_left <- "Features"
# df_right <- table_pres_abs_7_DSs
# colref_right <- "Features_bis"
# final_table_V3 <- merge(x = df_left, y = df_right, by.x = colref_left, by.y = colref_right)
# final_table_V3_stash = final_table_V3
# >>>>>>>>>>>>>>>> action 2 : add a col of %_#_times_selected_among_top4FSs
final_table_V3 = final_table_V2
list_all_SIGs_top4FSs = unique(as.character(final_table_V3$Features))
names(final_table_V3)
cols_top4FSs = c("FS_Remagus04", "FS_MDAnderson_part1of2_310", "FS_BMS_Horak_2013", "FS_MT_3_dts")
for (a_SIG_in_top4FSs in list_all_SIGs_top4FSs){ # for test : a_SIG_in_top4FSs = list_all_SIGs_top4FSs[3]
# num_times_selected_among_top4FSs
row_values_for_top4FSs<-final_table_V3[which(final_table_V3$Features %in% a_SIG_in_top4FSs),cols_top4FSs]
space_values_for_row_values_for_top4FSs <-as.numeric(as.vector(row_values_for_top4FSs))
num_times_selected_among_top4FSs = sum(space_values_for_row_values_for_top4FSs,na.rm = TRUE)
# add the col %_#_times_selected_among_top4FSs
final_table_V3[which(final_table_V3$Features %in% a_SIG_in_top4FSs),"Percentage_selection_among_top4FSs"] = ((num_times_selected_among_top4FSs * 100) / 4)
}
# # UNCOMMENT TO USE : WE DONT TO THIS BECAUSE WE KEEP ALL THE GENES NO MATTER THE SIG_STATUS
# # -----------------lets make restrictions following questions (SIG status and % repreentations in FS) and plot hist
# # >>>>>>>>>>>>> restrcition for V4 (only genes SIG_status_as_1 remain)
# final_table_V4 = final_table_V3
# final_table_V4 <- final_table_V4[which(final_table_V4$SIG_status == 1),]
# num_unique_genes_V4 <- dim(final_table_V4)[1]
# paste("- Number of genes SIG_status_as_1 : ",num_unique_genes_V4,sep='')
# final_table_V4_stashed = final_table_V4
# # UNCOMMENT TO USE : WE DONT TO THIS BECAUSE WE KEEP ALL THE GENES NO MATTER THE SIG_STATUS
# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ TAKE A KNEE MOMENT : Situation of genes that did not pass
# # 192 genes have SIG status
# # Q : are they different from the list of last time ? We just want to know what happened from this point to those genes
# # lets load the table of previous meeting SIG list and restricte the final_table_V3 to it
# path2file_previousSIGlist = "/home/amad/PALADIN_1/3CEREBRO/garage/projects/ATIP3/ATIP3_ML/ATIP3_ML_dev_version/data_acquisition/1_pipelines_or_tasks/Multitask_learning/res_learning_tasks/outputs/runs/SIGs_perc_selection_among_top4_FSs.xlsx"
# # library("readxl") # already called at the start of the script
# table_previous_SIGs_only <- read_excel(path2file_previousSIGlist)
# # - lets get the list of previous SIGs
# list_previous_SIGs_only = unique(as.character(table_previous_SIGs_only$Features))
# # - a version of V3 before limiting to out present SIGs) restrcted to previous SIGs and sorted by the descending order of s_all_abs
# final_table_V3_previous_SIGs_only <- final_table_V3[which(final_table_V3$Features %in% list_previous_SIGs_only),]
# final_table_V3_previous_SIGs_only_sorted_desc_sig_status <- final_table_V3_previous_SIGs_only[order( final_table_V3_previous_SIGs_only[,5] ),] ##! to save
# # - a version of V3 before limiting to out present SIGs) restrcted to previous SIGs that did not pass the SIGs status this time (6 revious SIGS genes)
# final_table_V3_previous_SIGs_not_passed <- final_table_V3_previous_SIGs_only[which(final_table_V3_previous_SIGs_only$SIG_status != 1),] ##! to save
# # - a version of V1 (table with the score stats) restrcted to previous SIGs that did not pass the SIGs status this time
# list_previous_SIGs_not_passed = unique(as.character(final_table_V3_previous_SIGs_not_passed$Features))
# final_table_V1_complete_stashed_previous_SIGs_not_passed <- final_table_V1_complete_stashed[which(final_table_V1_complete_stashed$Features %in% list_previous_SIGs_not_passed),] ##! to save
# # - lets save those 3
# require(openxlsx)
# list_of_tables_for_previous_SIGs_not_passed <- list("Previous_41_SIGs_present_situation" = final_table_V3_previous_SIGs_only_sorted_desc_sig_status,
#                                                     "Previous_SIGs_not_passed" = final_table_V3_previous_SIGs_not_passed,
#                                                     "Previous_SIGs_causes_not_passing" = final_table_V1_complete_stashed_previous_SIGs_not_passed)
# write.xlsx(list_of_tables_for_previous_SIGs_not_passed, file = "/home/amad/PALADIN_1/3CEREBRO/garage/projects/ATIP3/ATIP3_ML/ATIP3_ML_dev_version/data_acquisition/1_pipelines_or_tasks/Multitask_learning/res_learning_tasks/outputs/runs/Previous_41_SIGs_situation_after_SIGs_comp_with_Top4FSsVranksasentallftsselectedornot.xlsx")
# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~END OF KNEE MOMENT
# # UNCOMMENT TO USE : WE DONT TO THIS BECAUSE WE KEEP ALL THE GENES NO MATTER THE SIG_STATUS
# # >>>>>>>>>>>>>>>> restriction to %_#_times_selected_among_top4FSs =! 0
#
# # final_table_V4 is used as base
# final_table_V4_bis <-final_table_V4[which(final_table_V4$Percentage_selection_among_top4FSs > 0),]
# # save it
# table_to_save_final_table_V4_bis <- final_table_V4_bis[order( -final_table_V4_bis$Percentage_selection_among_top4FSs ),]
# filename_table_to_save_final_table_V4_bis = "/home/amad/PALADIN_1/3CEREBRO/garage/projects/ATIP3/ATIP3_ML/ATIP3_ML_dev_version/data_acquisition/1_pipelines_or_tasks/Multitask_learning/res_learning_tasks/outputs/runs/SIGs_perc_selection_among_top4_FSsVranksasentallftsselectedornot.xlsx"
# write.xlsx(table_to_save_final_table_V4_bis, filename_table_to_save_final_table_V4_bis)
final_table_V4_bis = final_table_V3
# >>>>>>>>> lets start adding the Mean of Coefs ranks for each gene
final_table_V5 = final_table_V4_bis
final_table_V5$Mean_coefs_rank_for_R04 <- NA
final_table_V5$Mean_coefs_rank_for_MDA <- NA
final_table_V5$Mean_coefs_rank_for_BMS <- NA
final_table_V5$Mean_coefs_rank_for_MT_all_3_copies <- NA
final_table_V5$Mean_coefs_rank_for_MT_copy_of_the_gene_from_R04 <- NA # _in_GSE63471 has been added to the name of the gene
final_table_V5$Mean_coefs_rank_for_MT_copy_of_the_gene_from_MDA <- NA # _in_GSE25055 has been added to the name of the gene
final_table_V5$Mean_coefs_rank_for_MT_copy_of_the_gene_from_BMS <- NA # _in_GSE41998 has been added to the name of the gene
# the tables where we get the mean coefs rank from
table_mcr_FS1 = list_fs_tables_retrieved_MCR[[1]] # lets get the table of coef per gene in each fs
table_mcr_FS2 = list_fs_tables_retrieved_MCR[[2]]
table_mcr_FS3 = list_fs_tables_retrieved_MCR[[3]]
table_mcr_FS4 = list_fs_tables_retrieved_MCR[[4]]
names(table_mcr_FS1) # to know the name of the col containing traditionally the rank
# lets get the list of fts to loop on
list_fts_final_table_V5 = unique(as.character(final_table_V5$Features)) # to loop through the rows of the table to supply
list_fts_table_mcr_FS1 = unique(as.character(table_mcr_FS1$Features)) # lets get the list of fts in each FS (in order to go get a value only if it existed in the FS)
list_fts_table_mcr_FS2 = unique(as.character(table_mcr_FS2$Features))
list_fts_table_mcr_FS3 = unique(as.character(table_mcr_FS3$Features))
list_fts_table_mcr_FS4 = unique(as.character(table_mcr_FS4$Features))
# lets supply the cols
for (a_ft_in_final_table_V5 in list_fts_final_table_V5){ # for test a_ft_in_final_table_V5 = list_fts_final_table_V5[1]
# + lets supply the val of the rank for the present gene in all 3 single-tasks FSs (step 1 : we get the vale, step 2 : we put the val in place)
if(a_ft_in_final_table_V5 %in% list_fts_table_mcr_FS1){ # for FS1
mean_coefs_rank_for_R04 = table_mcr_FS1[which(table_mcr_FS1$Features %in% a_ft_in_final_table_V5),"Mean_of_rank_across_10_seeds"]
final_table_V5[which(final_table_V5$Features %in% a_ft_in_final_table_V5),"Mean_coefs_rank_for_R04"] = mean_coefs_rank_for_R04
}
if(a_ft_in_final_table_V5 %in% list_fts_table_mcr_FS2){ # for FS2
mean_coefs_rank_for_MDA = table_mcr_FS2[which(table_mcr_FS2$Features %in% a_ft_in_final_table_V5),"Mean_of_rank_across_10_seeds"]
final_table_V5[which(final_table_V5$Features %in% a_ft_in_final_table_V5),"Mean_coefs_rank_for_MDA"] = mean_coefs_rank_for_MDA
}
if(a_ft_in_final_table_V5 %in% list_fts_table_mcr_FS3){ # for FS3
mean_coefs_rank_for_BMS = table_mcr_FS3[which(table_mcr_FS3$Features %in% a_ft_in_final_table_V5),"Mean_of_rank_across_10_seeds"]
final_table_V5[which(final_table_V5$Features %in% a_ft_in_final_table_V5),"Mean_coefs_rank_for_BMS"] = mean_coefs_rank_for_BMS
}
# + lets supply the val of the rank for the present gene in 4 ways : 1-as a mean of all 3 ranks given for 3 copies of the gene, 2-as a rank for each copy of the gene (3 copies)
MT_name_start = paste(a_ft_in_final_table_V5,"_in_",sep='') # we get the name of all the copies of the genes in the multi-task
list_MT_names_corresponding = c()
for (a_MT_name_known in list_fts_table_mcr_FS4){
if(startsWith(a_MT_name_known, MT_name_start)){
list_MT_names_corresponding = c(list_MT_names_corresponding,a_MT_name_known)
}
}
# focusing on the copies of a gene if it has copies in the multitask
table_mcr_FS4_rows_w_MT_name_start = table_mcr_FS4[which(table_mcr_FS4$Features %in% list_MT_names_corresponding),] # we get a short table with only the 3 copies of the present gene (to get mean and the copies of the presentgene)
numrows_table_mcr_FS4_rows_w_MT_name_start = nrow(table_mcr_FS4_rows_w_MT_name_start)
if(numrows_table_mcr_FS4_rows_w_MT_name_start > 0){
mean_coefs_rank_for_MT_all_3_copies=mean(table_mcr_FS4_rows_w_MT_name_start$Mean_of_rank_across_10_seeds, na.rm = TRUE) # get val of the mean of the copies
final_table_V5[which(final_table_V5$Features %in% a_ft_in_final_table_V5),"Mean_coefs_rank_for_MT_all_3_copies"] = mean_coefs_rank_for_MT_all_3_copies # val of mean of the copies added
for (one_of_list_MT_names_corresponding in list_MT_names_corresponding){
# get the val of the rank of the copy, whatever copy it is...
mean_coefs_rank_for_MT_copy_of_the_gene = table_mcr_FS4[which(table_mcr_FS4$Features %in% one_of_list_MT_names_corresponding),"Mean_of_rank_across_10_seeds"]
# ...report that value for the proper col of the copy
if(grepl("_in_GSE63471", one_of_list_MT_names_corresponding, fixed=TRUE)){
final_table_V5[which(final_table_V5$Features %in% a_ft_in_final_table_V5),"Mean_coefs_rank_for_MT_copy_of_the_gene_from_R04"] = mean_coefs_rank_for_MT_copy_of_the_gene
}else if (grepl("_in_GSE25055", one_of_list_MT_names_corresponding, fixed=TRUE)){
final_table_V5[which(final_table_V5$Features %in% a_ft_in_final_table_V5),"Mean_coefs_rank_for_MT_copy_of_the_gene_from_MDA"] = mean_coefs_rank_for_MT_copy_of_the_gene
}else if(grepl("_in_GSE41998", one_of_list_MT_names_corresponding, fixed=TRUE)){
final_table_V5[which(final_table_V5$Features %in% a_ft_in_final_table_V5),"Mean_coefs_rank_for_MT_copy_of_the_gene_from_BMS"] = mean_coefs_rank_for_MT_copy_of_the_gene
}
} # all copies of the present gene have their value added
} # cond of having at least one copy of the present gene in the multi-task is close
} # all present genes in the final table have been supplied with proper values of ranks
final_table_V5_stashed = final_table_V5
# >>>> lets add a col of mean of rank across the top4FSs
# - get a version full table with all ranks
final_table_V6 = final_table_V5
names(final_table_V6)
final_table_V6$Mean_coefs_rank_for_all_3_STs <- rowMeans(subset(final_table_V6, select = c(Mean_coefs_rank_for_R04, Mean_coefs_rank_for_MDA,Mean_coefs_rank_for_BMS)), na.rm = TRUE)
names(final_table_V6) #  reorder the table to have the full table
# final_table_V6_sorted_summary = final_table_V6_sorted[c("Features", "s_all",
#                                                         "MEAN_OF_RANKS_ACROSS_THE_TOP_4_FSs",
#                                                         "Percentage_selection_among_top4FSs", "FS_Remagus04","FS_MDAnderson_part1of2_310", "FS_BMS_Horak_2013","FS_MT_3_dts")]
# final_table_V6$MEAN_OF_RANKS_ACROSS_THE_TOP_4_FSs <- rowMeans(subset(final_table_V6, select = c(Mean_coefs_rank_for_R04, Mean_coefs_rank_for_MDA,Mean_coefs_rank_for_BMS,Mean_coefs_rank_for_MT_all_3_copies)), na.rm = TRUE)
# final_table_V6$FINAL_RANK_ACROSS_THE_TOP_4_FSs[order(final_table_V6$MEAN_OF_RANKS_ACROSS_THE_TOP_4_FSs)] <- 1:nrow(final_table_V6) # not added because the rank are ent already
# final_table_V6_sorted <- final_table_V6[order( final_table_V6$MEAN_OF_RANKS_ACROSS_THE_TOP_4_FSs ),] # to save
# get a version sorted on the final rank
# names(final_table_V6_sorted)
final_table_V6_reordered_cols = final_table_V6[c("Features",
"FS_Remagus04","FS_MDAnderson_part1of2_310","FS_BMS_Horak_2013","FS_MT_3_dts","Percentage_selection_among_top4FSs",
"high_string_status","s_all","s_all_abs","SIG_status",
"Mean_coefs_rank_for_R04","Mean_coefs_rank_for_MDA","Mean_coefs_rank_for_BMS","Mean_coefs_rank_for_all_3_STs",
"Mean_coefs_rank_for_MT_all_3_copies","Mean_coefs_rank_for_MT_copy_of_the_gene_from_R04",
"Mean_coefs_rank_for_MT_copy_of_the_gene_from_MDA","Mean_coefs_rank_for_MT_copy_of_the_gene_from_BMS")] # changed to not include an added final rank # to save
# we sorted on a the mean of the ST and on the mean of all MT copies
final_table_V6_reordered_cols_sorted_on_mean_STs <- final_table_V6_reordered_cols[order( final_table_V6_reordered_cols$Mean_coefs_rank_for_all_3_STs ),]
final_table_V6_reordered_cols_sorted_on_mean_MTcopies <- final_table_V6_reordered_cols[order( final_table_V6_reordered_cols$Mean_coefs_rank_for_MT_all_3_copies ),]
# we restrict those to only the important cols
final_table_V6_reordered_cols_sorted_on_mean_STs_res = final_table_V6_reordered_cols_sorted_on_mean_STs[c("Features",
"FS_Remagus04","FS_MDAnderson_part1of2_310","FS_BMS_Horak_2013","FS_MT_3_dts","Percentage_selection_among_top4FSs",
"high_string_status","s_all","s_all_abs","SIG_status",
"Mean_coefs_rank_for_all_3_STs", "Mean_coefs_rank_for_MT_all_3_copies")]
final_table_V6_reordered_cols_sorted_on_mean_MTcopies_res = final_table_V6_reordered_cols_sorted_on_mean_MTcopies[c("Features",
"FS_Remagus04","FS_MDAnderson_part1of2_310","FS_BMS_Horak_2013","FS_MT_3_dts","Percentage_selection_among_top4FSs",
"high_string_status","s_all","s_all_abs","SIG_status",
"Mean_coefs_rank_for_all_3_STs", "Mean_coefs_rank_for_MT_all_3_copies")]
View(final_table_V6_reordered_cols)
View(final_table_V6_reordered_cols_sorted_on_mean_STs)
View(final_table_V6_reordered_cols_sorted_on_mean_MTcopies)
View(final_table_V6_reordered_cols_sorted_on_mean_STs_res)
View(final_table_V6_reordered_cols_sorted_on_mean_MTcopies_res)
# now lets save em all in one sheet
require(openxlsx)
list_of_tables_from_ranks_of_coefs <- list("All_sortedby_STmean1" = final_table_V6_reordered_cols_sorted_on_mean_STs,
"All_sortedby_MTmean1" = final_table_V6_reordered_cols_sorted_on_mean_MTcopies,
"All_sortedby_STmean2" = final_table_V6_reordered_cols_sorted_on_mean_STs_res,
"All_sortedby_MTmean2" = final_table_V6_reordered_cols_sorted_on_mean_MTcopies_res)
write.xlsx(list_of_tables_from_ranks_of_coefs, file = "/home/amad/PALADIN_1/3CEREBRO/garage/projects/ATIP3/ATIP3_ML/ATIP3_ML_dev_version/data_acquisition/1_pipelines_or_tasks/Multitask_learning/res_learning_tasks/outputs/runs/Tables_of_all_genes_with_stability_and_ranks_no_restriction_V2.xlsx")
setwd("~/PALADIN_1/3CEREBRO/garage/projects/ATIP3/ATIP3_ML/ATIP3_ML_dev_version/data_acquisition/1_pipelines_or_tasks/correlation_matrices")
install.packages("corrplot")
head(mtcars)
M<-cor(mtcars)
head(round(M,2))
# test step 2 (drawing the corr matrix plot)
library(corrplot)
corrplot(M, method="circle")
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(M, method="color", col=col(200),
type="upper", order="hclust",
addCoef.col = "black", # Ajout du coefficient de corrélation
tl.col="black", tl.srt=45, #Rotation des etiquettes de textes
# Combiner avec le niveau de significativité
p.mat = p.mat, sig.level = 0.01, insig = "blank",
# Cacher les coefficients de corrélation sur la diagonale
diag=FALSE
)
# Les différentes dispositions du corrélogrammes
# Il y a 3 dispositions différentes :
#
#   “full” (par défaut) : Affiche la Matrice de corrélation en entier.
# “upper”: Affiche le triangle supérieur de la matrice de corrélation.
# “lower”: Affiche le triangle inférieur de la matrice de corrélation.
corrplot(M, type="upper")
corrplot(M, type="lower")
# Les différentes dispositions du corrélogrammes
# Il y a 3 dispositions différentes :
#
#   “full” (par défaut) : Affiche la Matrice de corrélation en entier.
# “upper”: Affiche le triangle supérieur de la matrice de corrélation.
# “lower”: Affiche le triangle inférieur de la matrice de corrélation.
corrplot(M, type="upper")
corrplot(M, type="lower")
# what we maintained
corrplot(M, method="color",type="lower")
# Corrélogramme avec rearrengement de type hclust
corrplot(M, type="upper", order="hclust")
# Utilisation de differents spectres de couleurs
col<- colorRampPalette(c("red", "white", "blue"))(20)
corrplot(M, type="upper", order="hclust", col=col)
# Changer la couleur de fond en lightblue
corrplot(M, type="upper", order="hclust", col=c("black", "white"),
bg="lightblue")
# what we maintained
col<- colorRampPalette(c("red", "white", "blue"))(20)
corrplot(M, method="color",type="lower",order="hclust", col=col)
# what we maintained
col<- colorRampPalette(c("red", "white", "blue"))(20)
corrplot(M, method="circle",type="lower",order="hclust", col=col)
# what we maintained
col<- colorRampPalette(c("red", "white", "blue"))(20)
corrplot(M, method="circle",type="lower",order="hclust", col=col,
bg="lightblue")
# what we maintained
col<- colorRampPalette(c("red", "white", "blue"))(20)
corrplot(M, method="circle",type="lower",order="hclust", col=col,
bg="black")
# what we maintained
col<- colorRampPalette(c("red", "white", "blue"))(20)
corrplot(M, method="circle",type="lower",order="hclust", col=col,
bg="brown")
# what we maintained
col<- colorRampPalette(c("red", "white", "blue"))(20)
corrplot(M, method="circle",type="lower",order="hclust", col=col,
bg="yellow")
# what we maintained
col<- colorRampPalette(c("red", "white", "blue"))(20)
corrplot(M, method="circle",type="lower",order="hclust", col=col,
bg="grey")
# what we maintained
col<- colorRampPalette(c("red", "white", "blue"))(20)
corrplot(M, method="circle",type="lower",order="hclust", col=col,
bg="darkgrey")
corrplot(M, type="upper", order="hclust", tl.col="black", tl.srt=45)
corrplot(M, type="upper", order="hclust", tl.col="black", tl.srt=66)
corrplot(M, type="upper", order="hclust", tl.col="black", tl.srt=45)
# what we maintained
col<- colorRampPalette(c("red", "white", "blue"))(20)
corrplot(M, method="circle",type="lower",order="hclust", col=col,
bg="darkgrey",
tl.col="black", tl.srt=45)
mat = mtcars
View(mat)
mat <- as.matrix(mat)
View(mat)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
View(p.mat)
diag(p.mat) <- 0
tmp <- cor.test(mat[, 2], mat[, 4], ...)
