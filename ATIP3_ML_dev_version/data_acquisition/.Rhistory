# that support these functions
# jmap is a function that returns the best probe sets matching a list of Entrez GeneIDs, gene symbols, or
# gene aliases.
#
# jscores is a function that returns the jetset scores for all probe sets matching a list of Entrez GeneIDs,
# gene symbols, aliases, or ensembl IDs.
# see this source for a tutorial on use of JETSET : https://cran.r-project.org/web/packages/jetset/vignettes/jetset.pdf
# - getting the best probes
# - - make sure that correct entrez_gene_id entries only stays in table
dictionary1 = dictionary
list_egi_uniks_in_dict1 = unique(as.character(dictionary1$ENTREZ_GENE_ID))
list_egi_uniks_in_dict1_no_nan <- na.omit(list_egi_uniks_in_dict1) #remove nan
list_egi_uniks_no_nanNunknown = list_egi_uniks_in_dict1_no_nan[list_egi_uniks_in_dict1_no_nan != ""] # remove "" (unknown feature data for probe)
# dictionary1_done = dictionary1[match(list_egi_uniks_no_nanNunknown, dictionary1$ENTREZ_GENE_ID), ] #xxx bad due to eliminating duplicates too early on
dictionary1_done = dictionary1[which(dictionary1$ENTREZ_GENE_ID %in% list_egi_uniks_no_nanNunknown),]
# test presence of ATIP3 probes : c_dict1 = dictionary1_done_bis[which(dictionary1_done_bis$"ID" %in% c("212093_s_at","212095_s_at","212096_s_at","239576_at")),]
# - - make sure that correct gene_symbol entries only stays in table
dictionary2 = dictionary1_done
list_gs_uniks_in_dict2 = unique(as.character(dictionary2$"Gene Symbol"))
list_gs_uniks_in_dict2_no_nan <- na.omit(list_gs_uniks_in_dict2) #remove nan
list_gs_uniks_no_nanNunknown = list_gs_uniks_in_dict2_no_nan[list_gs_uniks_in_dict2_no_nan != ""] # remove "" (unknown feature data for probe)
# dictionary2_done = dictionary2[match(list_gs_uniks_no_nanNunknown, dictionary2$"Gene Symbol"), ] #xxx bad due to eliminating duplicates too early on
dictionary2_done = dictionary2[which(dictionary2$"Gene Symbol" %in% list_gs_uniks_no_nanNunknown),]
# test presence of ATIP3 probes : c_dict2 = dictionary2_done[which(dictionary2_done$"ID" %in% c("212093_s_at","212095_s_at","212096_s_at","239576_at")),]
# - - search the best probes
best_probes_dict = dictionary2_done
best_probes_dict$Best_probe_4_new_ID = "NOT_CHANGED_YET"
for (one_of_the_rownames in rownames(best_probes_dict)) {
long_egi = best_probes_dict[one_of_the_rownames,"ENTREZ_GENE_ID"]
the_split_object <- strsplit(long_egi, " /// ") # the object obtained from split (contains only 1 list)
the_list_of_components = the_split_object[[1]] # get the list containing the splited parts # is list of 1 elt if pattern absent
for (candidate_egi_to_test in the_list_of_components) {
search_bestprobe <-jmap(my_ma_platform, eg = candidate_egi_to_test) # best probe for ATIP3/MTUS1 is "212096_s_at"
bestprobe<-search_bestprobe[[1]]
if (is.na(bestprobe)) { # !isNA(bestprobe = is not NA (a best probe has been found)
}else{
best_probes_dict[one_of_the_rownames,"Best_probe_4_new_ID"] = bestprobe # store the best found probe for the long egi
}
}
}
# the column Best_probe_4_new_ID has now only NOT_CHANGED_YET or the bestprobeset as values
# test presence of ATIP3 probes : c_best_probes_dict = best_probes_dict[which(best_probes_dict$"ID" %in% c("212093_s_at","212095_s_at","212096_s_at","239576_at")),]
# tidy the table
best_probes_list_uniks = unique(as.character(best_probes_dict$"Best_probe_4_new_ID")) # the unique entries among the best probesets for each egi
best_probes_list_uniks_no_placeholder = best_probes_list_uniks[best_probes_list_uniks != "NOT_CHANGED_YET"] # remove the placeholder before knowing the best probesets
best_probes_dict_tidy <- best_probes_dict[ which(best_probes_dict$ID %in% best_probes_list_uniks_no_placeholder), ]  # drop the rows were ID is a bad probe ie ID and Best_probe_4_new_ID are not the same
names(best_probes_dict_tidy) <- c("old1","Gene Symbol","old2","ID") # these two lines will rename the columns and keep Best_probe_4_new_ID as new col ID, and the column Gene Symbol as second column
best_probes_repo = best_probes_dict_tidy[c("ID","Gene Symbol")]
# NB : best_probe_repo do not have the same rows order as the initial expression set so when changing the probes name to gene name, mind that
# make a version of the expression set with only the probesets kept
list_of_good_probes = as.character(best_probes_repo$ID)
ex1 <- ex[ which(rownames(ex) %in% list_of_good_probes), ]
list_of_good_probes_inter = rownames(ex1)   # a list of the best probesets
# # or you can also do this :
# list_of_good_probes_inter = intersect(list_of_good_probes, row.names(ex))
# ex1 = ex[list_of_good_probes_inter, ]
# test presence of ATIP3 probes : c_ex1 = ex1[which(rownames(ex1) %in% c("212093_s_at","212095_s_at","212096_s_at","239576_at")),]
# make a version of the selection but with gene names instead of probesets names
ex1_bis_with_GS = ex1
best_probes_repo_w_rows_order_of_ex1 = best_probes_repo[rownames(ex1),] # a table of best_probe_repo with rows in the same order as in the rownames of ex1 (the best probesets)
rownames(ex1_bis_with_GS) = best_probes_repo_w_rows_order_of_ex1$"Gene Symbol" # the GS col of a table with rows in the same order as in ex1 with the best probesets as rownames
list_of_good_probes_inter_GS_version = rownames(ex1_bis_with_GS) # a list of the GS for the best probesets
# test presence of ATIP3 probes : c_ex1_bis_with_GS = ex1_bis_with_GS[which(rownames(ex1_bis_with_GS) %in% c("MTUS1")),]
# # put the samples as cols and the genes as fts
# ex1 <-t(ex1)
# ex1_bis_with_GS <-t(ex1_bis_with_GS)
}
#=================================test of mclust 1 but for one gene only
# source : https://www.youtube.com/watch?v=6OtFwdcRp7k&list=WL&index=2
# load necessary librairies
library(lattice) # for plots
library(mclust) # to extract the 6 parameters of a mixture of 2 models
library(AdaptGauss)
# set the seed so that the random action can be fixated for repetability issues
set.seed(12345)
#--1--Setting the dataset to manipulate (some options throughout the script change depending on chosen dataset)
# - uncomment one of these 4 following lines to choose a dataset
# cohort <- "Remagus02"
cohort <- "Remagus04"
# cohort <- "MDAnderson"
# cohort <-  "another_dataset_you_want_to_use"
#--3--Setting the dataset of entry
# entry_data <- ex1 # a dataset with best probesets
entry_data <- ex1_bis_with_GS # the same dataset but with the gene symbol used instead
the_samples_list = "MTUS1"
x<-entry_data[the_samples_list,]
# #--Test Data
# # example of data to use for test
# x=c(rnorm(100,0,0.5), rnorm(200,3,1))
# # plotting the two distributions of the test data
# y = c(rep(0,100), rep(1,200))
# densityplot(~x|as.factor(y), layout=c(1,2), n=200, width=1.5)
# # show a binomdal plot
# densityplot(x, 200, width = 1.5) # xlab, lim, ylim options see hist in others scripts
#--verifications
# NB : check if MTUS1 is present "MTUS1" %in% dimnames(x)[[1]] # should display TRUE
###>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ONE SAMPLE THRESOLD (MOSTLY FOR AN HISTOGRAM) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#--1--Mclust : 1 for the one-dimensional model
# make a model called fit
fit = Mclust(x,G=2)
# plot(fit)
# recover the parameters
# fit$parameter$pro # - the mixing proportions for the components of the mixture
Weight1 = fit$parameter$pro[1] # the proportions of the 1st component values
Weight2 = fit$parameter$pro[2] # the proportions of the 2nd component values
# fit$parameter$mean # - The mean for each component
# NB : If there is more than one component, this is a matrix whose kth column is the mean of the kth component of the mixture model.
Mean1 = fit$parameter$mean[[1]] # the mean of the 1st component values
Mean2 = fit$parameter$mean[[2]] # the mean of the 2nd component values
# fit$parameter$variance$sigmasq # - the variances : a vector whose kth component is the variance for the kth component in the mixture model
# fit$parameter$variance$sigmasq[1] # the variance of the 1st component values
# fit$parameter$variance$sigmasq[2] # the variance of the 2nd component values
if (length(fit$parameter$variance$sigmasq) != 1) {
SD1 = sqrt(fit$parameter$variance$sigmasq[1]) # the std dev of the 1st component values
SD2 = sqrt(fit$parameter$variance$sigmasq[2]) # the std dev of the 2nd component values
}else { # if fit$parameter$variance$sigmasq does not have two values it means one common values to both components
SD1 = sqrt(fit$parameter$variance$sigmasq[1]) # the std dev of the 1st component values
SD2 = sqrt(fit$parameter$variance$sigmasq[1]) # the std dev of the 2nd component values
}
# -------------- Notes on Mclust    :
# sigmasq or scale : what is the proper value for the variances?
# its sigmasq (see why here https://rdrr.io/cran/mclust/man/mclustVariance.html
# NB : with k-means, we observe a bias where the small cluster mean is pushed out to absorb more values (see source 17:22)
# another good full courses on Mclust library :
# http://rug.mnhn.fr/semin-r/PDF/semin-R_mclust_APerrard_240513.pdf
# https://cran.r-project.org/web/packages/mclust/vignettes/mclust.html
# implement the EM algorithm :
# https://tinyheero.github.io/2016/01/03/gmm-em.html
#--2--Finds the intersect of two gaussians or log gaussians from package AdaptGauss
intersec_coord = Intersect2Mixtures(Mean1,SD1,Weight1,Mean2,SD2,Weight2)
# options are : Mean1,SD1,Weight1,Mean2,SD2,Weight2,IsLogDistribution,MinData,MaxData
# see doc here : https://rdrr.io/cran/AdaptGauss/man/Intersect2Mixtures.html
# let's keep the threshold
# intersec_coord_y <- intersec_coord$CutY # the y of the intersection
intersec_coord_x <- intersec_coord$CutX # the x of the intersection
# draw the histogram
h <- hist(x, 100, col = "cornsilk1", freq = FALSE,
main = paste("Histogram of the intensities (", "Cohort : ", cohort, ", gene : ",the_samples_list,")", sep=""),
border = "antiquewhite4",
xlab = paste("Intensities of the best probeset for the gene (", "threshold (red line) : ~",as.character(round(intersec_coord_x, digits = 3)),")", sep=""),
xlim = c(min(x),max(x)))
lines(density(x),lwd=1.5,col="blue")
xs = seq(min(x), max(x), by=.01) # add the bimodal curve
lines(xs, Weight1*dnorm(xs, Mean1,SD1), lty=2,col = "darkgreen") # add the curve of mode 1
lines(xs, Weight2*dnorm(xs, Mean2,SD2), lty=2,col = "coral4") # add the curve of mode 2
# mach_threshold <- intersec_coord_x
abline(v = intersec_coord_x, col = "red", lwd = 2) # add the threshold line
###>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# getting a report on the sample in common with Sylvie (rownames as samples names in accession, , MTUS1, Threshold, ATIP3_class_predicted)
# - make a short matrix of the restriction on MTUS1
x_thres_collector<-as.data.frame(t(entry_data)) # transpose x to put a new col later as the threshold of each rows ie each samples
# NB: as transposing outputs a matrices that col cant be added to it easily, we coerce it into a df to be able to add a col to it later
x_thres_collector = x_thres_collector[c("MTUS1")]
x_thres_collector$Threshold_low_high <- intersec_coord_x # new threshold col with a placeholder to know if changed or not
x_thres_collector$ATIP3_class_predicted <- "NOT_CHANGED_YET" # predictions with gene threshold
x_thres_collector$ATIP3_class_predicted[which(x_thres_collector$MTUS1 < intersec_coord_x)]<-"low"
x_thres_collector$ATIP3_class_predicted[which(x_thres_collector$MTUS1 > intersec_coord_x)]<-"high"
count_class_low = sum(x_thres_collector$ATIP3_class_predicted == "low") # counts of the classes with gene threshold
count_class_high = sum(x_thres_collector$ATIP3_class_predicted == "high")
# reporting on results
paste(cohort," cohort gene threshold : ", intersec_coord_x, sep="")
paste(cohort," cohort MTUS1 classes count : ATIP3 low (", count_class_low, "), ATIP3 high (",count_class_high,")", sep="")
paste(cohort," cohort range MTUS1 is : ",range(x_thres_collector$MTUS1)[1] ," to ",range(x_thres_collector$MTUS1)[2], sep="")
# part for saving on file and reread anytime
outfilename = paste(cohort, "_threshold_of_MTUS1_gene_atip3_classes.csv", sep='')
write.csv(x_thres_collector, outfilename, row.names=T)
####>>>>>>>>>>> SCRIPT TO MAKE SAMPLES CORRESPONDS IN EACH COHORT <<<<<<<<###
library(readxl) # for ability to read xlsx and xls files
#--1-- load a table with classes predicted from thresholds
# path2file1 = "/home/amad/PALADIN_1/3CEREBRO/garage/projects/ATIP3/ATIP3_ML/ATIP3_ML_dev_version/data_acquisition/Remagus02_threshold_of_MTUS1_gene_atip3_classes.csv" # R02
path2file1 = "/home/amad/PALADIN_1/3CEREBRO/garage/projects/ATIP3/ATIP3_ML/ATIP3_ML_dev_version/data_acquisition/Remagus04_threshold_of_MTUS1_gene_atip3_classes.csv" # R04
# path2file1 = "/home/amad/PALADIN_1/3CEREBRO/garage/projects/ATIP3/ATIP3_ML/ATIP3_ML_dev_version/data_acquisition/MDAnderson_threshold_of_MTUS1_gene_atip3_classes.csv" # MDA
table1 <- read.csv(file = path2file1, header = TRUE)
####>>>>>>>>>>> SCRIPT FOR GEO DATASETS EXPRESSION ANALYSIS <<<<<<<<###
# source : https://github.com/hongqin/RCompBio/blob/master/ncbigeo/ncbiGEO2012Nov14-demo-youtube.R
# tutorial here : https://www.youtube.com/watch?v=gC-WuK4BbJY&list=PLMpDEwpxDXcYl4fBsFpom95SBaymcNGpm&index=3&t=0s
#2012 Nov 14
#--1--Clean up the environment (optional)
# rm(list=ls())
#--2--Load needed librairies
# # - install to make if library GEOquery is not yet installed
# source("http://bioconductor.org/biocLite.R")
# biocLite("GEOquery")
library(GEOquery)
#--3--verify if the accession number corresponding to dataset to download and analyse are existant through these two portals
#http://www.ncbi.nlm.nih.gov/geo/browse/
#GEO2R
#--4--Setting the dataset to manipulate (some options throughout the script change depending on chosen dataset)
# - uncomment one of these 4 following lines to choose a dataset
# cohort <- "Remagus02"
# cohort <- "Remagus04"
cohort <- "MDAnderson"
# cohort <-  "another_dataset_you_want_to_use"
#--4.4--Setting the type of probesets to keep (all probests or the best probeset) ##! later on add a treatment to get the summarized ones into genes
# - uncomment one of these 2 following lines to choose a version
# part_of_probesets_kept <- "allprobesets"
part_of_probesets_kept <- "bestprobesetsonly"
# part_of_probesets_kept <-"CDFsummarized"
if (part_of_probesets_kept=="bestprobesetsonly") {
#--4.5--Setting the version to save (with probes name or genes names)
# - uncomment one of these 4 following lines to choose a version
# version_to_save <- "probesnames"
version_to_save <- "genesnames"
} else if (part_of_probesets_kept=="allprobesets") {
version_to_save <- "probesnames"
} else if (part_of_probesets_kept=="CDFsummarized") {
version_to_save <- "genesnames"
}
#--5--store the related infos necessary to analysis and changing from dataset to datset
if (cohort=="Remagus02") {
myGSE = "GSE26639" # R02
myGPL = "GPL570"
myFtDesired <-c("Gene Symbol","ENTREZ_GENE_ID")
my_ma_platform = "hgu133plus2"
} else if (cohort=="Remagus04") {
myGSE = "GSE63471" # R04
myGPL = "GPL571"
myFtDesired <-c("Gene Symbol","ENTREZ_GENE_ID")
my_ma_platform = "hgu133a" # NB : we use hgu133a because we did not find the u133A 2.0 that is really used to produce  R04
} else if (cohort=="MDAnderson") {
myGSE = "GSE25066" # MDA
myGPL = "GPL96"
myFtDesired <-c("Gene Symbol","ENTREZ_GENE_ID")
my_ma_platform = "hgu133a"
} else
print("Replace this statement with a command to store the path of another_dataset_you_want_to_use")
#--6--Download raw data and make an expression set from it
gset_raw <- getGEO(myGSE, GSEMatrix =TRUE)
if (length(gset_raw) > 1) idx <- grep(myGPL, attr(gset_raw, "names")) else idx <- 1
gset <- gset_raw[[idx]]
ex <- exprs(gset) #This is the expression matrix
if (part_of_probesets_kept=="bestprobesetsonly") {
#--7--Select the best probeset to keep by gene
# 1) Find out annotations features that are interesting to use
# - get a peak at the desired columns to keep in replacement of the probe names
peak_at_names_in_ftdata <- gset@featureData@data # this shows us that "Gene Symbol" can be used as myFtDesired for RO2, R04 and MDA. so we set it at the start of the file
# 2) changing the names
dictionary = gset@featureData@data[, c('ID', myFtDesired)]  #This is a lookup table for probe ID and ORF
# test presence of ATIP3 probes : c_dict = dictionary[which(dictionary$"ID" %in% c("212093_s_at","212095_s_at","212096_s_at","239576_at")),]
#==========using JETSET to select the best probeset for each gene
library(jetset)
# the jetset library has these objects :
# [1] "jmap" "jscores" "scores.hgu133a"
# [4] "scores.hgu133plus2" "scores.hgu95av2" "scores.u133x3p"
# The functions jmap and jscores are the intended user-level interface, and scores.* are data sets
# that support these functions
# jmap is a function that returns the best probe sets matching a list of Entrez GeneIDs, gene symbols, or
# gene aliases.
#
# jscores is a function that returns the jetset scores for all probe sets matching a list of Entrez GeneIDs,
# gene symbols, aliases, or ensembl IDs.
# see this source for a tutorial on use of JETSET : https://cran.r-project.org/web/packages/jetset/vignettes/jetset.pdf
# - getting the best probes
# - - make sure that correct entrez_gene_id entries only stays in table
dictionary1 = dictionary
list_egi_uniks_in_dict1 = unique(as.character(dictionary1$ENTREZ_GENE_ID))
list_egi_uniks_in_dict1_no_nan <- na.omit(list_egi_uniks_in_dict1) #remove nan
list_egi_uniks_no_nanNunknown = list_egi_uniks_in_dict1_no_nan[list_egi_uniks_in_dict1_no_nan != ""] # remove "" (unknown feature data for probe)
# dictionary1_done = dictionary1[match(list_egi_uniks_no_nanNunknown, dictionary1$ENTREZ_GENE_ID), ] #xxx bad due to eliminating duplicates too early on
dictionary1_done = dictionary1[which(dictionary1$ENTREZ_GENE_ID %in% list_egi_uniks_no_nanNunknown),]
# test presence of ATIP3 probes : c_dict1 = dictionary1_done_bis[which(dictionary1_done_bis$"ID" %in% c("212093_s_at","212095_s_at","212096_s_at","239576_at")),]
# - - make sure that correct gene_symbol entries only stays in table
dictionary2 = dictionary1_done
list_gs_uniks_in_dict2 = unique(as.character(dictionary2$"Gene Symbol"))
list_gs_uniks_in_dict2_no_nan <- na.omit(list_gs_uniks_in_dict2) #remove nan
list_gs_uniks_no_nanNunknown = list_gs_uniks_in_dict2_no_nan[list_gs_uniks_in_dict2_no_nan != ""] # remove "" (unknown feature data for probe)
# dictionary2_done = dictionary2[match(list_gs_uniks_no_nanNunknown, dictionary2$"Gene Symbol"), ] #xxx bad due to eliminating duplicates too early on
dictionary2_done = dictionary2[which(dictionary2$"Gene Symbol" %in% list_gs_uniks_no_nanNunknown),]
# test presence of ATIP3 probes : c_dict2 = dictionary2_done[which(dictionary2_done$"ID" %in% c("212093_s_at","212095_s_at","212096_s_at","239576_at")),]
# - - search the best probes
best_probes_dict = dictionary2_done
best_probes_dict$Best_probe_4_new_ID = "NOT_CHANGED_YET"
for (one_of_the_rownames in rownames(best_probes_dict)) {
long_egi = best_probes_dict[one_of_the_rownames,"ENTREZ_GENE_ID"]
the_split_object <- strsplit(long_egi, " /// ") # the object obtained from split (contains only 1 list)
the_list_of_components = the_split_object[[1]] # get the list containing the splited parts # is list of 1 elt if pattern absent
for (candidate_egi_to_test in the_list_of_components) {
search_bestprobe <-jmap(my_ma_platform, eg = candidate_egi_to_test) # best probe for ATIP3/MTUS1 is "212096_s_at"
bestprobe<-search_bestprobe[[1]]
if (is.na(bestprobe)) { # !isNA(bestprobe = is not NA (a best probe has been found)
}else{
best_probes_dict[one_of_the_rownames,"Best_probe_4_new_ID"] = bestprobe # store the best found probe for the long egi
}
}
}
# the column Best_probe_4_new_ID has now only NOT_CHANGED_YET or the bestprobeset as values
# test presence of ATIP3 probes : c_best_probes_dict = best_probes_dict[which(best_probes_dict$"ID" %in% c("212093_s_at","212095_s_at","212096_s_at","239576_at")),]
# tidy the table
best_probes_list_uniks = unique(as.character(best_probes_dict$"Best_probe_4_new_ID")) # the unique entries among the best probesets for each egi
best_probes_list_uniks_no_placeholder = best_probes_list_uniks[best_probes_list_uniks != "NOT_CHANGED_YET"] # remove the placeholder before knowing the best probesets
best_probes_dict_tidy <- best_probes_dict[ which(best_probes_dict$ID %in% best_probes_list_uniks_no_placeholder), ]  # drop the rows were ID is a bad probe ie ID and Best_probe_4_new_ID are not the same
names(best_probes_dict_tidy) <- c("old1","Gene Symbol","old2","ID") # these two lines will rename the columns and keep Best_probe_4_new_ID as new col ID, and the column Gene Symbol as second column
best_probes_repo = best_probes_dict_tidy[c("ID","Gene Symbol")]
# NB : best_probe_repo do not have the same rows order as the initial expression set so when changing the probes name to gene name, mind that
# make a version of the expression set with only the probesets kept
list_of_good_probes = as.character(best_probes_repo$ID)
ex1 <- ex[ which(rownames(ex) %in% list_of_good_probes), ]
list_of_good_probes_inter = rownames(ex1)   # a list of the best probesets
# # or you can also do this :
# list_of_good_probes_inter = intersect(list_of_good_probes, row.names(ex))
# ex1 = ex[list_of_good_probes_inter, ]
# test presence of ATIP3 probes : c_ex1 = ex1[which(rownames(ex1) %in% c("212093_s_at","212095_s_at","212096_s_at","239576_at")),]
# make a version of the selection but with gene names instead of probesets names
ex1_bis_with_GS = ex1
best_probes_repo_w_rows_order_of_ex1 = best_probes_repo[rownames(ex1),] # a table of best_probe_repo with rows in the same order as in the rownames of ex1 (the best probesets)
rownames(ex1_bis_with_GS) = best_probes_repo_w_rows_order_of_ex1$"Gene Symbol" # the GS col of a table with rows in the same order as in ex1 with the best probesets as rownames
list_of_good_probes_inter_GS_version = rownames(ex1_bis_with_GS) # a list of the GS for the best probesets
# test presence of ATIP3 probes : c_ex1_bis_with_GS = ex1_bis_with_GS[which(rownames(ex1_bis_with_GS) %in% c("MTUS1")),]
# # put the samples as cols and the genes as fts
# ex1 <-t(ex1)
# ex1_bis_with_GS <-t(ex1_bis_with_GS)
}
#=================================test of mclust 1 but for one gene only
# source : https://www.youtube.com/watch?v=6OtFwdcRp7k&list=WL&index=2
# load necessary librairies
library(lattice) # for plots
library(mclust) # to extract the 6 parameters of a mixture of 2 models
library(AdaptGauss)
# set the seed so that the random action can be fixated for repetability issues
set.seed(12345)
#--1--Setting the dataset to manipulate (some options throughout the script change depending on chosen dataset)
# - uncomment one of these 4 following lines to choose a dataset
# cohort <- "Remagus02"
# cohort <- "Remagus04"
cohort <- "MDAnderson"
# cohort <-  "another_dataset_you_want_to_use"
#--3--Setting the dataset of entry
# entry_data <- ex1 # a dataset with best probesets
entry_data <- ex1_bis_with_GS # the same dataset but with the gene symbol used instead
the_samples_list = "MTUS1"
x<-entry_data[the_samples_list,]
# #--Test Data
# # example of data to use for test
# x=c(rnorm(100,0,0.5), rnorm(200,3,1))
# # plotting the two distributions of the test data
# y = c(rep(0,100), rep(1,200))
# densityplot(~x|as.factor(y), layout=c(1,2), n=200, width=1.5)
# # show a binomdal plot
# densityplot(x, 200, width = 1.5) # xlab, lim, ylim options see hist in others scripts
#--verifications
# NB : check if MTUS1 is present "MTUS1" %in% dimnames(x)[[1]] # should display TRUE
###>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ONE SAMPLE THRESOLD (MOSTLY FOR AN HISTOGRAM) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#--1--Mclust : 1 for the one-dimensional model
# make a model called fit
fit = Mclust(x,G=2)
# plot(fit)
# recover the parameters
# fit$parameter$pro # - the mixing proportions for the components of the mixture
Weight1 = fit$parameter$pro[1] # the proportions of the 1st component values
Weight2 = fit$parameter$pro[2] # the proportions of the 2nd component values
# fit$parameter$mean # - The mean for each component
# NB : If there is more than one component, this is a matrix whose kth column is the mean of the kth component of the mixture model.
Mean1 = fit$parameter$mean[[1]] # the mean of the 1st component values
Mean2 = fit$parameter$mean[[2]] # the mean of the 2nd component values
# fit$parameter$variance$sigmasq # - the variances : a vector whose kth component is the variance for the kth component in the mixture model
# fit$parameter$variance$sigmasq[1] # the variance of the 1st component values
# fit$parameter$variance$sigmasq[2] # the variance of the 2nd component values
if (length(fit$parameter$variance$sigmasq) != 1) {
SD1 = sqrt(fit$parameter$variance$sigmasq[1]) # the std dev of the 1st component values
SD2 = sqrt(fit$parameter$variance$sigmasq[2]) # the std dev of the 2nd component values
}else { # if fit$parameter$variance$sigmasq does not have two values it means one common values to both components
SD1 = sqrt(fit$parameter$variance$sigmasq[1]) # the std dev of the 1st component values
SD2 = sqrt(fit$parameter$variance$sigmasq[1]) # the std dev of the 2nd component values
}
# -------------- Notes on Mclust    :
# sigmasq or scale : what is the proper value for the variances?
# its sigmasq (see why here https://rdrr.io/cran/mclust/man/mclustVariance.html
# NB : with k-means, we observe a bias where the small cluster mean is pushed out to absorb more values (see source 17:22)
# another good full courses on Mclust library :
# http://rug.mnhn.fr/semin-r/PDF/semin-R_mclust_APerrard_240513.pdf
# https://cran.r-project.org/web/packages/mclust/vignettes/mclust.html
# implement the EM algorithm :
# https://tinyheero.github.io/2016/01/03/gmm-em.html
#--2--Finds the intersect of two gaussians or log gaussians from package AdaptGauss
intersec_coord = Intersect2Mixtures(Mean1,SD1,Weight1,Mean2,SD2,Weight2)
# options are : Mean1,SD1,Weight1,Mean2,SD2,Weight2,IsLogDistribution,MinData,MaxData
# see doc here : https://rdrr.io/cran/AdaptGauss/man/Intersect2Mixtures.html
# let's keep the threshold
# intersec_coord_y <- intersec_coord$CutY # the y of the intersection
intersec_coord_x <- intersec_coord$CutX # the x of the intersection
# draw the histogram
h <- hist(x, 100, col = "cornsilk1", freq = FALSE,
main = paste("Histogram of the intensities (", "Cohort : ", cohort, ", gene : ",the_samples_list,")", sep=""),
border = "antiquewhite4",
xlab = paste("Intensities of the best probeset for the gene (", "threshold (red line) : ~",as.character(round(intersec_coord_x, digits = 3)),")", sep=""),
xlim = c(min(x),max(x)))
lines(density(x),lwd=1.5,col="blue")
xs = seq(min(x), max(x), by=.01) # add the bimodal curve
lines(xs, Weight1*dnorm(xs, Mean1,SD1), lty=2,col = "darkgreen") # add the curve of mode 1
lines(xs, Weight2*dnorm(xs, Mean2,SD2), lty=2,col = "coral4") # add the curve of mode 2
# mach_threshold <- intersec_coord_x
abline(v = intersec_coord_x, col = "red", lwd = 2) # add the threshold line
###>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# getting a report on the sample in common with Sylvie (rownames as samples names in accession, , MTUS1, Threshold, ATIP3_class_predicted)
# - make a short matrix of the restriction on MTUS1
x_thres_collector<-as.data.frame(t(entry_data)) # transpose x to put a new col later as the threshold of each rows ie each samples
# NB: as transposing outputs a matrices that col cant be added to it easily, we coerce it into a df to be able to add a col to it later
x_thres_collector = x_thres_collector[c("MTUS1")]
x_thres_collector$Threshold_low_high <- intersec_coord_x # new threshold col with a placeholder to know if changed or not
x_thres_collector$ATIP3_class_predicted <- "NOT_CHANGED_YET" # predictions with gene threshold
x_thres_collector$ATIP3_class_predicted[which(x_thres_collector$MTUS1 < intersec_coord_x)]<-"low"
x_thres_collector$ATIP3_class_predicted[which(x_thres_collector$MTUS1 > intersec_coord_x)]<-"high"
count_class_low = sum(x_thres_collector$ATIP3_class_predicted == "low") # counts of the classes with gene threshold
count_class_high = sum(x_thres_collector$ATIP3_class_predicted == "high")
# reporting on results
paste(cohort," cohort gene threshold : ", intersec_coord_x, sep="")
paste(cohort," cohort MTUS1 classes count : ATIP3 low (", count_class_low, "), ATIP3 high (",count_class_high,")", sep="")
paste(cohort," cohort range MTUS1 is : ",range(x_thres_collector$MTUS1)[1] ," to ",range(x_thres_collector$MTUS1)[2], sep="")
# part for saving on file and reread anytime
outfilename = paste(cohort, "_threshold_of_MTUS1_gene_atip3_classes.csv", sep='')
write.csv(x_thres_collector, outfilename, row.names=T)
intersec_coord
m1=Mean1; sd1=SD1; m2=Mean2; sd2=SD2; p1=Weight1; p2=Weight2 # test with mydata
# a fonction to find the intersection points x values
intersect <- function(m1, sd1, m2, sd2, p1, p2){
B <- (m1/sd1^2 - m2/sd2^2)
A <- 0.5*(1/sd2^2 - 1/sd1^2)
C <- 0.5*(m2^2/sd2^2 - m1^2/sd1^2) - log((sd1/sd2)*(p2/p1))
if (A!=0){
(-B + c(1,-1)*sqrt(B^2 - 4*A*C))/(2*A)
} else {-C/B}
}
intersec_coord_list<-intersect(m1,sd1,m2,sd2,p1,p2)
intersec_coord_list
# keep only values that are between the two means
intersec_coord_list <- intersec_coord_list[intersec_coord_list < m2]
intersec_coord_list <- intersec_coord_list[intersec_coord_list > m1]
intersec_coord_x<-intersec_coord_list[length(intersec_coord_list)]
intersec_coord_x
h <- hist(x, 100, col = "cornsilk1", freq = FALSE,
main = paste("Histogram of the intensities (", "Cohort : ", cohort, ", gene : ",the_samples_list,")", sep=""),
border = "antiquewhite4",
xlab = paste("Intensities of the best probeset for the gene (", "threshold (red line) : ~",as.character(round(intersec_coord_x, digits = 3)),")", sep=""),
xlim = c(min(x),max(x)))
lines(density(x),lwd=1.5,col="blue")
xs = seq(min(x), max(x), by=.01) # add the bimodal curve
lines(xs, Weight1*dnorm(xs, Mean1,SD1), lty=2,col = "darkgreen") # add the curve of mode 1
lines(xs, Weight2*dnorm(xs, Mean2,SD2), lty=2,col = "coral4") # add the curve of mode 2
# mach_threshold <- intersec_coord_x
abline(v = intersec_coord_x, col = "red", lwd = 2) # add the threshold line
# mach_threshold <- intersec_coord_x
abline(v = intersec_coord_x, col = "red", lwd = 2) # add the threshold line
# getting a report on the sample in common with Sylvie (rownames as samples names in accession, , MTUS1, Threshold, ATIP3_class_predicted)
# - make a short matrix of the restriction on MTUS1
x_thres_collector<-as.data.frame(t(entry_data)) # transpose x to put a new col later as the threshold of each rows ie each samples
# NB: as transposing outputs a matrices that col cant be added to it easily, we coerce it into a df to be able to add a col to it later
x_thres_collector = x_thres_collector[c("MTUS1")]
x_thres_collector$Threshold_low_high <- intersec_coord_x # new threshold col with a placeholder to know if changed or not
x_thres_collector$ATIP3_class_predicted <- "NOT_CHANGED_YET" # predictions with gene threshold
x_thres_collector$ATIP3_class_predicted[which(x_thres_collector$MTUS1 < intersec_coord_x)]<-"low"
x_thres_collector$ATIP3_class_predicted[which(x_thres_collector$MTUS1 > intersec_coord_x)]<-"high"
count_class_low = sum(x_thres_collector$ATIP3_class_predicted == "low") # counts of the classes with gene threshold
count_class_high = sum(x_thres_collector$ATIP3_class_predicted == "high")
# reporting on results
paste(cohort," cohort gene threshold : ", intersec_coord_x, sep="")
paste(cohort," cohort MTUS1 classes count : ATIP3 low (", count_class_low, "), ATIP3 high (",count_class_high,")", sep="")
paste(cohort," cohort range MTUS1 is : ",range(x_thres_collector$MTUS1)[1] ," to ",range(x_thres_collector$MTUS1)[2], sep="")
# part for saving on file and reread anytime
outfilename = paste(cohort, "_threshold_of_MTUS1_gene_atip3_classes.csv", sep='')
write.csv(x_thres_collector, outfilename, row.names=T)
####>>>>>>>>>>> SCRIPT TO MAKE SAMPLES CORRESPONDS IN EACH COHORT <<<<<<<<###
library(readxl) # for ability to read xlsx and xls files
#--1-- load a table with classes predicted from thresholds
# path2file1 = "/home/amad/PALADIN_1/3CEREBRO/garage/projects/ATIP3/ATIP3_ML/ATIP3_ML_dev_version/data_acquisition/Remagus02_threshold_of_MTUS1_gene_atip3_classes.csv" # R02
# path2file1 = "/home/amad/PALADIN_1/3CEREBRO/garage/projects/ATIP3/ATIP3_ML/ATIP3_ML_dev_version/data_acquisition/Remagus04_threshold_of_MTUS1_gene_atip3_classes.csv" # R04
path2file1 = "/home/amad/PALADIN_1/3CEREBRO/garage/projects/ATIP3/ATIP3_ML/ATIP3_ML_dev_version/data_acquisition/MDAnderson_threshold_of_MTUS1_gene_atip3_classes.csv" # MDA
table1 <- read.csv(file = path2file1, header = TRUE)
#--2-- load a table with two types of samples names
# path2file2 = "/home/amad/PALADIN_1/3CEREBRO/garage/projects/ATIP3/ATIP3_ML/ATIP3_ML_dev_version/atip3_material/Sample_Names_correspondance/R02 pour Amad.xlsx" # R02
path2file2 = "/home/amad/PALADIN_1/3CEREBRO/garage/projects/ATIP3/ATIP3_ML/ATIP3_ML_dev_version/atip3_material/Sample_Names_correspondance/MDA_pour_moi.csv" # R02
# table2 <- read_excel(path2file2, sheet = 1) # R02
table2 <- read.csv(file = path2file2, header = TRUE) # MDA
# restrict the table to only needed cols
names(table2) # to see the cols to keep
View(table2)
# table2 = table2[c("!Sample_geo_accession","cletri")] # R02
table2 = table2[c("Accession","Title")] # MDA
#--3-- add old names table contents in the classes predicted table
# rename columns that are not in good name
names(table1)[1] <- "Sample_GEO_accession"
# table1_2_joined<-merge(x = table1, y = table2, by.x = "Sample_GEO_accession",by.y = "!Sample_geo_accession", all = TRUE) # R02
table1_2_joined<-merge(x = table1, y = table2, by.x = "Sample_GEO_accession",by.y = "Accession", all = TRUE) # MDA
View(table1_2_joined)
#--4--add old classes to joined table of new names and old names
path2file3 = "/home/amad/PALADIN_1/3CEREBRO/garage/projects/ATIP3/ATIP3_ML/ATIP3_ML_dev_version/data_acquisition/3_results/res_clustering/Clustering pour Amad 180520.xls"
# table3 <- read_excel(path2file3, sheet = 1)  # R02
# table3 <- read_excel(path2file3, sheet = 2)  # R04
table3 <- read_excel(path2file3, sheet = 3)  # MDA
# resrict the table cols
names(table3) # to see the cols to keep
# names(table3) <- c("CLETRI_classes_by_Sylvie","letgo1","letgo1","letgo2","letgo3","letgo4","ATIP3_classes_by_Sylvie") # R02
names(table3) <- c("CLETRI_classes_by_Sylvie","letgo1","letgo1","letgo2","ATIP3_classes_by_Sylvie") # MDA
table3 = table3[c("CLETRI_classes_by_Sylvie","ATIP3_classes_by_Sylvie")]
View(table3)
View(table1_2_joined)
View(table1_2_joined)
View(table3)
View(table1_2_joined)
#--5-- add olc classes in table with the classes predicted table
# table1_2_3_joined<-merge(x = table1_2_joined, y = table3, by.x = "cletri",by.y = "CLETRI_classes_by_Sylvie", all = TRUE) # R02
table1_2_3_joined<-merge(x = table1_2_joined, y = table3, by.x = "Title",by.y = "CLETRI_classes_by_Sylvie", all = TRUE) # MDA
#--6-- add columns to compare with sylvie ATIP3 low
# - add a col to compare with the median thres classes
table1_2_3_joined$Same_ATIP3_low_than_Sylvie <- "different_from_Sylvie_work"
table1_2_3_joined$Same_ATIP3_low_than_Sylvie[which((table1_2_3_joined$ATIP3_class_predicted == "low")&(table1_2_3_joined$ATIP3_classes_by_Sylvie == 1))]<-"low_as_in_Sylvie_work"
# make the count of the overlap
count_class_low_same_as_sylvie_work = sum(table1_2_3_joined$Same_ATIP3_low_than_Sylvie == "low_as_in_Sylvie_work") # counts of the classes with gene threshold
# reporting on results
paste(cohort," cohort MTUS1 classes count that are same as in sylvie's work : ", count_class_low_same_as_sylvie_work, sep="")
# sort the final table on the order of classes by sylvie and see what we have for the ATIP3 low samples in sylvie's work
table1_2_3_joined_sorted_on_sylvie_classes<-table1_2_3_joined[order(table1_2_3_joined$ATIP3_classes_by_Sylvie),]
View(table1_2_3_joined_sorted_on_sylvie_classes)
